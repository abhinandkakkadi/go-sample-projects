READ THIS TO GET A HINT ON THE project

packages used
os 
flag
time
csv


// here i am going to built a question and answers type quiz in multiple choice format
// approach :
// create a csv file and it should contain a question and 3 potential answers in which all of them are comma separated.
// so we can slice the first element as question and rest of them as answers
// so when we read the file using a reader it will be in the form a of 2d slice in which all row represents
// a question and 3 answers which are comma separated.
// also the struct should contain additional answers section which represents the actual answer
// So our struct which represents question and answer should contain question string and a slice of string to
// store answers
// while checking the answer if should iterate through the array and check if which one is correct
// for now lets assume that any of the answer in the multiple choice question is correct

// breaking down each part
// reading from csv file
// we will use a flag value of type string to take in the name of csv file from which we want to read. We will set problems.csv
// as default
// in order to set the timer, I will pass time using a integer flag and i will set default as 30s.
// I will figure out how to set timer using time package which sent a data when time's up throgh a channel

// read file from csv
// create a file pointer for the file by passing file's name as argument
// with that file pointer create a reader of csv type
// after that with that reader read all the details inside the csv file
// it will be in a 2d slice format,

// writing to a slice of struct instance
// Now the 2d slice will have question and answers in a 2d slice
// Each row will consist of each line which have been read from the file and each element
// in that row will be comma separated elements which are read from the file
// now when we slice through the 2d slice we will be getting each row.
// which will have question in the zeroth index and potential answers in the 1st to second last index
// and the last position will have the actual answer

// Now the actual game

// after configuration done above we can move on to the main business logic of the game
// will will be iterating through the slice of struct problems

// just before starting the game we have to implement the timer from timer package which we have to figure out

// we will display the problems and give the multiple choice associated with it on the screen
// And we will run a go routine in which we will give a change to input the answer
// after that we will create a select statements with two case 
// one will be the receiving channel from the timer
// and the other one will be the answer sent from the goroutine for inputting elements
// which ever comes first will execute and if the answer comes first in a particular iteration of loop
// then we will compare that with the actual answer which is present at the 3rd index of slice
// and if it is correct. we will update the marks 
// if the time expires before we complete the problems. the total marks should be printed and we can break the for loop by using a label
// we need a label since we will be writing the above logic inside select and it only goes out of select.

// if the timer did,t expire in while for loop is running - that is if the user completes the project in time
// we should display the total marks outside the for loop